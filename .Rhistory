temp_june
terra::extract(temp_june, wbi_sf)
terra::extract(temp_june, vect(wbi_sf))
terra::extract(temp_june, terra::vect(wbi_sf))
plot(temp_june)
plot(terra::vect(wbi_sf), add = TRUE)
terra::vect(wbi_sf)
temp_june
temp_june <- terra::project(temp_june, terra::vect(wbi_sf))
temp_june
terra::crs(temp_june) <- "epsg:4326"
temp_june <- terra::rast("/Users/marco/Downloads/grids_germany_monthly_air_temp_mean_202206.asc")
temp_june <- terra::project(temp_june, terra::vect(wbi_sf))
terra::vect(wbi_sf)
terra::crs(temp_june) <- "EPSG:4326"
temp_june
terra::crs(temp_june)
library(terra)
temp_june <- terra::rast("/Users/marco/Downloads/grids_germany_monthly_air_temp_mean_202206.asc")
crs_4326 <- "+proj=longlat +ellps=WGS84 +no_defs"
crs_3857 <- "+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs"
crs(temp_june) <- crs_3857
y <- project(x, crs_3857)
y <- project(temp_june, crs_3857)
z <- project(y, crs_4326)
z
plot(temp_june)
plot(y)
plot(terra::vect(wbi_sf), add = TRUE)
plot(y)
plot(z)
plot(terra::vect(wbi_sf), add = TRUE)
terra::extract(z, terra::vect(wbi_sf))
wbi_sf$temp <- terra::extract(z, terra::vect(wbi_sf))
# Ordinary Kriging:
v_mod_ok <- wbi_sf %>%
filter(date == Sys.Date()) %>%
as("Spatial") %>%
autofitVariogram(wbi ~ temp, .)
wbi_sf
terra::extract(z, terra::vect(wbi_sf))
wbi_sf$temp <- terra::extract(z, terra::vect(wbi_sf))$grids_germany_monthly_air_temp_mean_202206
wbi_sf$temp
# Ordinary Kriging:
v_mod_ok <- wbi_sf %>%
filter(date == Sys.Date()) %>%
as("Spatial") %>%
autofitVariogram(wbi ~ temp, .)
# Ordinary Kriging:
v_mod_ok <- wbi_sf %>%
filter(date == Sys.Date()) %>%
drop_na() %>%
as("Spatial") %>%
autofitVariogram(wbi ~ temp, .)
wbi_sf %>%
filter(date == Sys.Date()) %>%
drop_na() %>%
as("Spatial")
wbi_sf %>%
filter(date == Sys.Date())
wbi_sf %>%
filter(date == Sys.Date()) %>%
drop_na()
wbi_sf
wbi_sf %>%
filter(date == Sys.Date()) %>%
as("Spatial") %>%
drop_na()
wbi_sf %>%
filter(date == Sys.Date()) %>%
as("Spatial")
wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp))
wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
as("Spatial")
# Ordinary Kriging:
v_mod_ok <- wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
as("Spatial") %>%
autofitVariogram(wbi ~ temp, .)
v_mod_ok
g <-  wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
as("Spatial") %>%
gstat(formula = wbi ~ temp, model = v_mod_ok$var_model, data = .)
z <- predict(g, grid)
wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
as("Spatial")
g
z <- predict(g, grid)
wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
as("Spatial"
)
g <-  wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
as("Spatial") %>%
gstat(formula = wbi ~ temp, model = v_mod_ok$var_model, data = .)
g
z <- predict(g, grid)
wbi_sf
View(wbi_sf)
wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp))
wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
as("Spatial")
z <- predict(g, z)
z
names(z) <- temp
names(z) <- "temp"
z <- predict(g, z)
z <- predict(g, grid)
grid
names(grid)
names(grid) <- "temp"
z <- predict(g, grid)
z <- z["var1.pred",,]
names(z) <- "Waldbrandgefahrenindex"
write_stars(z, "data/wbi_current.tif")
b <- seq(0, 5, 0.05)
plot(z, breaks = b, col = hcl.colors(length(b)-1, "Spectral", rev = TRUE), reset = FALSE)
z
z
plot(z)
library(rvest)
library(dplyr)
library(tidyr)
library(stringr)
library(glue)
library(purrr)
library(lubridate)
library(sf)
library(tidygeocoder)
library(readr)
library(rnaturalearth)
library(stars)
library(gstat)
library(automap)
library(ggplot2)
library(rcartocolor)
counties_long <- c("Baden-Württemberg",
"Bayern",
"Berlin",
"Brandenburg",
"Bremen",
"Hamburg",
"Hessen",
"Mecklenburg-Vorpommern",
"Niedersachen",
"Nordrhein-Westfalen",
"Rheinland-Pfalz",
"Saarland",
"Sachsen",
"Sachsen-Anhalt",
"Schleswig-Holstein",
"Thüringen"
)
counties_short <- c("BW",
"BY",
"BE",
"BB",
"HB",
"HH",
"HE",
"MV",
"NI",
"NW",
"RP",
"SL",
"SN",
"ST",
"SH",
"TH"
)
wbi <- map_dfr(seq_along(counties_long), function(id){
url <- glue("https://www.dwd.de/DWD/warnungen/agrar/wbx/wbx_tab_alle_{counties_short[id]}.html")
wbi <- url %>%
read_html() %>%
html_nodes(xpath='/html/body/article/section[2]/figure/table') %>%
html_table()
wbi <- wbi[[1]]
wbi$county <- counties_long[id]
if(wbi$Stationsname[length(wbi$Stationsname)] == "Stationsname") wbi <- wbi[-nrow(wbi), ]
wbi <- wbi %>%
mutate(Statiosname_long = glue("{Stationsname}, {county}")) %>%
geocode(Statiosname_long, method = "google")
wbi_long <- wbi %>%
tidyr::pivot_longer(cols = contains("."),
values_to = "wbi",
names_to = "date") %>%
mutate(date = str_sub(date, start = 4),
date = glue("{date}{year(Sys.Date())}"),
date = dmy(date),
type = case_when(date == Sys.Date() ~ "measured",
TRUE               ~ "predicted")
) %>%
arrange(date)
wbi_long
})
write_csv(
wbi,
"data/wbi_current.csv"
)
write_csv(
wbi,
"data/wbi_history.csv",
append = TRUE
)
wbi_sf <- wbi %>%
st_as_sf(coords = c("long", "lat"), crs = 4326)
write_sf(wbi_sf, "data/wbi_current.geojson", append = FALSE)
border <- ne_countries(country = "Germany", scale = 10, returnclass = "sf")
border <- border %>%
st_transform(st_crs(wbi_sf))
grid <- st_as_sfc(st_bbox(border))
grid <- stars::st_as_stars(grid, dx = 0.010, dy = 0.010)
grid <- grid[border]
library(terra)
temp_june <- terra::rast("/Users/marco/Downloads/grids_germany_monthly_air_temp_mean_202206.asc")
crs_4326 <- "+proj=longlat +ellps=WGS84 +no_defs"
crs_3857 <- "+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs"
crs(temp_june) <- crs_3857
y <- project(temp_june, crs_3857)
z <- project(y, crs_4326)
plot(z)
plot(terra::vect(wbi_sf), add = TRUE)
wbi_sf$temp <- terra::extract(z, terra::vect(wbi_sf))$grids_germany_monthly_air_temp_mean_202206
wbi_kriging <- wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
as("Spatial")
UK <- krige(
wbi~coords.x1+coords.x2, # Think "Z~X+Y" but {sp} conversion alters variable naming
wbi_kriging, # input data in {sp} format (`X` --> `coords.x1`)
grid,                # locations to interpolate at
model = autofitVariogram(  # we need an appropriate variogram fit
wbi~X+Y,                   # here we can keep "X+Y" - it's just how it is
wbi_kriging
)$var_model
)
UK <- krige(
wbi~coords.x1+coords.x2, # Think "Z~X+Y" but {sp} conversion alters variable naming
wbi_kriging, # input data in {sp} format (`X` --> `coords.x1`)
grid,                # locations to interpolate at
model = autofitVariogram(  # we need an appropriate variogram fit
wbi~temo,                   # here we can keep "X+Y" - it's just how it is
wbi_kriging
)$var_model
)
UK <- krige(
wbi~coords.x1+coords.x2, # Think "Z~X+Y" but {sp} conversion alters variable naming
wbi_kriging, # input data in {sp} format (`X` --> `coords.x1`)
grid,                # locations to interpolate at
model = autofitVariogram(  # we need an appropriate variogram fit
wbi~temp,                   # here we can keep "X+Y" - it's just how it is
wbi_kriging
)$var_model
)
wbi_kriging
UK <- krige(
wbi~coordinates.x1+coordinates.x2, # Think "Z~X+Y" but {sp} conversion alters variable naming
wbi_kriging, # input data in {sp} format (`X` --> `coords.x1`)
grid,                # locations to interpolate at
model = autofitVariogram(  # we need an appropriate variogram fit
wbi~temp,                   # here we can keep "X+Y" - it's just how it is
wbi_kriging
)$var_model
)
UK <- krige(
wbi~x+y, # Think "Z~X+Y" but {sp} conversion alters variable naming
wbi_kriging, # input data in {sp} format (`X` --> `coords.x1`)
grid,                # locations to interpolate at
model = autofitVariogram(  # we need an appropriate variogram fit
wbi~temp,                   # here we can keep "X+Y" - it's just how it is
wbi_kriging
)$var_model
)
data(meuse)
meise
meuse
coordinates(meuse) = ~x+y
meuse
data(meuse.grid)
gridded(meuse.grid) = ~x+y
m <- vgm(.4, "Sph", 954, .06)
x <- krige(log(zinc)~x+y, meuse, meuse.grid, model = m, block = c(40,40))
wbi_kriging
meuse.grid
g <-  wbi_kriging %>%
gstat(formula = wbi ~ temp, model = v_mod_ok$var_model, data = .)
# Ordinary Kriging:
v_mod_ok <-  wbi_kriging %>%
autofitVariogram(wbi ~ temp, .)
plot(v_mod_ok)
g <-  wbi_kriging %>%
gstat(formula = wbi ~ temp, model = v_mod_ok$var_model, data = .)
names(grid) <- "temp"
z <- predict(g, grid)
z <- z["var1.pred",,]
names(z) <- "Waldbrandgefahrenindex"
write_stars(z, "data/wbi_current.tif")
b <- seq(0, 5, 0.05)
plot(z, breaks = b, col = hcl.colors(length(b)-1, "Spectral", rev = TRUE), reset = FALSE)
plot(st_geometry(wbi_sf %>%
filter(date == Sys.Date())), pch = 3, cex = 0.4, add = TRUE)
contour(z, breaks = b, add = TRUE)
b <- seq(0, 10, 0.05)
plot(z, breaks = b, col = hcl.colors(length(b)-1, "Spectral", rev = TRUE), reset = FALSE)
b <- seq(-2, 10, 0.05)
plot(z, breaks = b, col = hcl.colors(length(b)-1, "Spectral", rev = TRUE), reset = FALSE)
b <- seq(-2, 2, 0.05)
plot(z, breaks = b, col = hcl.colors(length(b)-1, "Spectral", rev = TRUE), reset = FALSE)
b <- seq(-2.5, 2, 0.05)
plot(z, breaks = b, col = hcl.colors(length(b)-1, "Spectral", rev = TRUE), reset = FALSE)
plot(z)
names(temp_june) <- "temp"
z <- predict(g, grid)
z <- predict(g, temp_june)
z <- predict(g, temp_june)
z <- predict(g, st_as_stars(temp_june))
y <- project(temp_june, crs_3857)
z <- project(y, crs_4326)
names(z) <- "temp"
z <- predict(g, st_as_stars(z))
g
wbi_kriging
wbi_kriging <- wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
as("Spatial") %>%
st_transform(crs_4326)
wbi_kriging <- wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
st_transform(crs_4326) %>%
as("Spatial")
wbi_kriging
UK <- krige(
wbi~x+y, # Think "Z~X+Y" but {sp} conversion alters variable naming
wbi_kriging, # input data in {sp} format (`X` --> `coords.x1`)
grid,                # locations to interpolate at
model = autofitVariogram(  # we need an appropriate variogram fit
wbi~temp,                   # here we can keep "X+Y" - it's just how it is
wbi_kriging
)$var_model
)
UK <- krige(
wbi~x+y, # Think "Z~X+Y" but {sp} conversion alters variable naming
wbi_kriging, # input data in {sp} format (`X` --> `coords.x1`)
grid,                # locations to interpolate at
model = v_mod_ok$var_model
)
UK <- krige(
wbi~x+y, # Think "Z~X+Y" but {sp} conversion alters variable naming
wbi_kriging, # input data in {sp} format (`X` --> `coords.x1`)
z,                # locations to interpolate at
model = v_mod_ok$var_model
)
UK <- krige(
wbi~x+y, # Think "Z~X+Y" but {sp} conversion alters variable naming
wbi_kriging, # input data in {sp} format (`X` --> `coords.x1`)
st_as_stars(z),                # locations to interpolate at
model = v_mod_ok$var_model
)
st_as_stars(z)
y <- project(temp_june, crs_3857)
z <- project(y, crs_4326)
pred_grid <- st_as_stars(z)
names(pred_grid) <- "temp"
plot(pred_grid)
plot(wbi_kriging["wbi"])
plot(z)
plot(pred_grid)
pred_grid
pred_grid <- st_as_stars(z)
names(pred_grid) <- "temp"
plot(pred_grid)
d
plot(pred_grid)
pred_grid <- pred_grid / 100
wbi_sf
wbi_kriging <- wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
st_transform(crs_4326) %>%
as("Spatial")
g <-  wbi_kriging %>%
krige(formula = wbi ~ temp, ., pred_grid, model = v_mod_ok$var_model, )
g
plot(g)
wbi_kriging %>%
idw(formula = wbi ~ 1, ., pred_grid)
wbi_kriging %>%
idw(formula = wbi ~ 1, ., pred_grid) %>%
plot()
wbi_kriging %>%
idw(formula = wbi ~ 1, ., pred_grid, idp = 1) %>%
plot()
wbi_kriging %>%
idw(formula = wbi ~ 1, ., pred_grid, idp = 0.5) %>%
plot()
wbi_kriging %>%
idw(formula = wbi ~ 1, ., pred_grid, idp = 0.2) %>%
plot()
g
# Ordinary Kriging:
v_mod_ok <- wbi_kriging %>%
autofitVariogram(wbi ~ 1, .)
g <- wbi_kriging %>%
krige(formula = wbi ~ 1, ., grid, model = v_mod_ok$var_model)
grid
st_transform_proj(grid, crs_4326)
test <- st_transform_proj(grid, crs_4326)
g <- wbi_kriging %>%
krige(formula = wbi ~ 1, ., test, model = v_mod_ok$var_model)
test <- rast(grid) %>% project(crs_4326)
test <- rast(grid) %>% project(crs_4326) %>% st_as_stars()
g <- wbi_kriging %>%
krige(formula = wbi ~ 1, ., test, model = v_mod_ok$var_model)
plot(g)
temp_june <- terra::rast("/Users/marco/Downloads/grids_germany_daily_soil_temperature_5cm_202206/grids_germany_daily_soil_temperature_5cm_20220630.asc")
nied_june <- terra::rast("/Users/marco/Downloads/grids_germany_daily_soil_moist_202206/grids_germany_daily_soil_moist_20220630.asc")
terra::rast(list(temp_june, nied_june))
cov_stack <- terra::rast(list(temp_june, nied_june))
names(cov_stack)
names(cov_stack) <- c("temp", "nied")
crs_4326 <- "+proj=longlat +ellps=WGS84 +no_defs"
crs_3857 <- "+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs"
y <- project(cov_stack, crs_3857)
crs_3857 <- "+proj=tmerc +lat_0=0 +lon_0=9 +k=1 +x_0=3500000 +y_0=0 +ellps=bessel +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7 +units=m +no_defs"
crs(cov_stack) <- crs_3857
y <- project(cov_stack, crs_3857)
z <- project(y, crs_4326)
plot(z)
plot(terra::vect(wbi_sf), add = TRUE)
cov <- terra::extract(z, terra::vect(wbi_sf))$grids_germany_monthly_air_temp_mean_202206
cov <- terra::extract(z, terra::vect(wbi_sf))
cov
cov <- cbind(wbi_sf, terra::extract(z, terra::vect(wbi_sf)))
cov_sf <- cbind(wbi_sf, terra::extract(z, terra::vect(wbi_sf)))
cov_sf
wbi_kriging <- wbi_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
st_transform(crs_4326) %>%
as("Spatial")
pred_grid <- st_as_stars(z)
plot(pred_grid)
# Ordinary Kriging:
v_mod_ok <- wbi_kriging %>%
autofitVariogram(wbi ~ temp + nied, .)
wbi_kriging
wbi_kriging <- cov_sf %>%
filter(date == Sys.Date(),
!is.na(temp)) %>%
st_transform(crs_4326) %>%
as("Spatial")
# Ordinary Kriging:
v_mod_ok <- wbi_kriging %>%
autofitVariogram(wbi ~ temp + nied, .)
plot(v_mod_ok)
wbi_kriging %>%
idw(formula = wbi ~  temp + nied, ., pred_grid, idp = 0.2) %>%
plot()
g <- wbi_kriging %>%
krige(formula = wbi ~ temp + nied, ., pred_grid, model = v_mod_ok$var_model)
pred_grid
stars::st_dimensions(pred_grid)
pred_grid@band
pred_grid$band
pred_grid$values
plot(pred_grid)
wbi_kriging %>%
idw(formula = wbi ~  temp + nied, ., test, idp = 0.2) %>%
plot()
wbi_kriging %>%
idw(formula = wbi ~  temp + nied, ., pred_grid, idp = 0.2) %>%
plot()
g <- wbi_kriging %>%
krige(formula = wbi ~ temp + nied, ., pred_grid, model = v_mod_ok$var_model)
as(pred_grid, "Spatial")
y <- raster(pred_grid)
library(raster)
y <- raster(pred_grid)
y <- raster(rast(pred_grid))
y
plot(y)
z
plot(z)
y <- stack(z)
y
z <- as(y, "SpatialGridDataFrame")
plot(z)
z
g <- wbi_kriging %>%
krige(formula = wbi ~ temp + nied, ., z, model = v_mod_ok$var_model)
plot(g)
g
st_as_stars(g)
plot(st_as_stars(g))
